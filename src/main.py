import string
import telebot

from library import *
from func_pass import strong_pass
from faq_bot import faq_about
from end_of_words import period_result, end_of_word
from func_pass import social_password, pass_corrector


bot = telebot.TeleBot('7763321668:AAELL2LjdEvhL_CqN1hcGb7ulM4S1sGWgaw')
bot.set_webhook()


@bot.message_handler(commands=["start"])
def start(m):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('–ü–∞—Ä–æ–ª—å –¥–ª—è —Å–æ—Ü —Å–µ—Ç–µ–π', '–°–ª–æ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å')
    bot.send_message(m.chat.id,
                     '\n\n*üîê –ù–∞–ø–∏—à–∏ –±–æ—Ç—É —Å–≤–æ–π –ø–∞—Ä–æ–ª—å –∏'
                     ' –æ–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç –µ–≥–æ –Ω–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å*\\!\n'
                     '*–õ–∏–±–æ –º–æ–∂–µ—à—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–∂–µ –≥–æ—Ç–æ–≤—ã–π\\!*\n\n'
                     '1Ô∏è‚É£ –ü–∞—Ä–æ–ª—å –¥–ª—è —Å–æ—Ü —Å–µ—Ç–µ–π\n'
                     '\n2Ô∏è‚É£ –°–ª–æ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å\n',
                     reply_markup=markup, parse_mode='MarkdownV2')


@bot.message_handler(commands=["help"])
def help(m):
    bot.send_message(m.chat.id, '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –ø–∏—Å–∞—Ç—å *@SpectreGather*\n'
                                '\n*–ë–æ—Ç —Å–æ–∑–¥–∞–Ω –≤ —Ä–∞–º–∫–∞—Ö –∏–Ω–¥–∏–≤–∏–¥—É–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞*', parse_mode='MarkdownV2')


@bot.message_handler(commands=["about"])
def help(m):
    result = faq_about()
    bot.send_message(m.chat.id, result, parse_mode='MarkdownV2')


@bot.message_handler(content_types=["text"])
def handle_text(message):
    flag = True
    check_string = string.ascii_lowercase + string.ascii_uppercase + string.punctuation + string.digits

    if message.text.strip() == '–ü–∞—Ä–æ–ª—å –¥–ª—è —Å–æ—Ü —Å–µ—Ç–µ–π':
        markup = telebot.types.ReplyKeyboardMarkup(True)
        markup.row('üó∫ Google', 'üìÆ Yandex', 'üìò Vk', 'üì¨ Mail')
        markup.row('üí¨ Facebook', 'üì∫ Avito', 'üì± Instagram')
        markup.row('üìÑ Gosuslugi', 'üî• –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç')
        markup.row('üè† –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')
        bot.send_message(message.chat.id,'*–í—ã–±–µ—Ä–∏* –∫ —á–µ–º—É —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–∏–¥—É–º–∞—Ç—å –ø–∞—Ä–æ–ª—å', reply_markup=markup, parse_mode='MarkdownV2')

    elif message.text.strip() in ('üó∫ Google', 'üìÆ Yandex', 'üìò Vk', 'üì¨ Mail', 'üí¨ Facebook', 'üì∫ Avito', 'üì± Instagram', 'üìÑ Gosuslugi'):
        text_to_function = message.text.lower()
        bot.send_message(message.chat.id,
                         social_password(text_to_function[2:]))

    elif message.text.strip() == 'üî• –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç':
        bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ *—Å–∞–π—Ç–∞* –∏–ª–∏ *–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è*', parse_mode='MarkdownV2')
        bot.register_next_step_handler(message, get_individual)

    elif message.text.strip() == 'üè† –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row('–ü–∞—Ä–æ–ª—å –¥–ª—è —Å–æ—Ü —Å–µ—Ç–µ–π', '–°–ª–æ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å')
        bot.send_message(message.chat.id, 'üèù –¢—ã –≤ –º–µ–Ω—é', reply_markup=markup)

    elif message.text.strip() == '–°–ª–æ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å':
        answer = strong_pass(False)
        bot.send_message(message.chat.id, '*'f'{answer}*',
                         parse_mode='MarkdownV2')
    else:
        for char in message.text.strip():
            if char not in check_string:
                flag = False
        if flag:
            get_pass(message)
        else:
            bot.send_message(message.chat.id,
                             '‚ùå *–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã*\n'
                             '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥–∏–º—ã–π —Ç–µ–∫—Å—Ç\n\n'
                             '\\- –ï—Å—Ç—å –ø—Ä–æ–±–µ–ª—ã\n'
                             '\\- –ü–µ—Ä–µ–ø—É—Ç–∞–Ω–∞ —Ä—É—Å—Å–∫–∞—è *A* –∏ –ª–∞—Ç–∏–Ω—Å–∫–∞—è\n'
                             '\\- –ï—Å—Ç—å –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã\n\n'
                             '*P\\.S\\. –ë–æ—Ç —Ä–∞–∑–ª–∏—á–∞–µ—Ç —Ä—É—Å—Å–∫–∏–π –∏ '
                             '–ª–∞—Ç–∏–Ω—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç*',
                             parse_mode='MarkdownV2')


def get_individual(message: types.Message):
    check_string = string.ascii_lowercase + string.ascii_uppercase + \
                   string.punctuation + string.digits
    text = message.text
    flag = True
    for char in message.text.strip():
        if char not in check_string:
            flag = False

    if message.text.strip() in ('üó∫ Google', 'üìÆ Yandex', 'üìò Vk', 'üì¨ Mail', 'üí¨ Facebook', 'üì∫ Avito', 'üì± Instagram', 'üìÑ Gosuslugi'):
        text = message.text[2:].lower()
        bot.send_message(message.chat.id, 'üíé –í–æ—Ç *–ø—è—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤* –¥–ª—è —Ç–µ–±—è\\!', parse_mode='MarkdownV2')
        for _ in range(0, 5):
            bot.send_message(message.chat.id, social_password(text))
    elif flag is False:
        bot.send_message(message.chat.id,
                         '‚ùå *–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã*\n'
                         '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥–∏–º—ã–π —Ç–µ–∫—Å—Ç\n\n'
                         '\\- –ï—Å—Ç—å –ø—Ä–æ–±–µ–ª—ã\n'
                         '\\- –ü–µ—Ä–µ–ø—É—Ç–∞–Ω–∞ —Ä—É—Å—Å–∫–∞—è *A* –∏ –ª–∞—Ç–∏–Ω—Å–∫–∞—è\n'
                         '\\- –ï—Å—Ç—å –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã\n\n'
                         '*P\\.S\\. –ë–æ—Ç —Ä–∞–∑–ª–∏—á–∞–µ—Ç —Ä—É—Å—Å–∫–∏–π –∏ '
                         '–ª–∞—Ç–∏–Ω—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç*',
                         parse_mode='MarkdownV2')
        return 0
    else:
        bot.send_message(message.chat.id, 'üíé –í–æ—Ç *–ø—è—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤* –¥–ª—è —Ç–µ–±—è\\!', parse_mode='MarkdownV2')
        for _ in range(0, 5):
            bot.send_message(message.chat.id, social_password(text))


@bot.callback_query_handler(func=lambda call:True)
def callback_inline(call):
    corrected_password = pass_corrector(call.data)
    bot.send_message(call.message.chat.id, corrected_password)


bot.polling(none_stop=True, interval=0)